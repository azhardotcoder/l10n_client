<?php

/**
 * @file
 * Submits translations to a remote localization server.
 */

use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;

/**
 * Implements hook_help().
 */
function l10n_client_contributor_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.l10n_client_contributor':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Localization Client Contributor allows users to contribute translations to the community from the convenience of their site. The community server is configured globally while each user needs access on the server and their own API key configured locally to identify with the server for contribution to happen.') . '</p>';
      $output .= '<p>' . t('The default community server is <a href=":server">:server</a> and may be changed on <a href=":configure">the configuration page</a>.', array(':server' => 'https://localize.drupal.org/', ':configure' => Url::fromRoute('locale.settings'))) . '</p>';
      $output .= '<p>' . t('Users need the <em>Contribute translations to localization server</em> permission to contribute to the community server as well as their personal API key configured on their user profile.') . '</p>';
      $output .= '<p>' . t('To contribute to a community server, permissions are required on the server side as well. <a href=":server">To contribute to :server, see the <em>How to contribute</em> section there.</a>', array(':server' => 'https://localize.drupal.org/')) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function l10n_client_contributor_form_locale_translate_settings_alter(&$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::configFactory()->getEditable('l10n_client_contributor.settings');
  
  $form['l10n_client_contributor_use_server'] = [
    '#title' => t('Enable sharing translation modifications with server'),
    '#type' => 'checkbox',
    '#default_value' => $config->get('use_server'),
  ];

  $form['l10n_client_contributor_server'] = [
    '#title' => t('Address of localization server to use'),
    '#type' => 'textfield',
    '#description' => t('Each local translation submission or change will also be submitted to this server. We suggest you enter <a href="@localize">https://localize.drupal.org/</a> to share with the greater Drupal community. Make sure you set up an API key in the user account settings for each user that will participate in the translations.', ['@localize' => 'https://localize.drupal.org/']),
    '#default_value' => $config->get('server'),
    '#states' => [
      'visible' => [
        ':input[name=l10n_client_contributor_use_server]' => ['checked' => TRUE],
      ],
    ],
  ];

  $form['l10n_client_contributor_basic_auth_user'] = [
    '#title' => t('Basic Auth Username'),
    '#type' => 'textfield',
    '#default_value' => $config->get('basic_auth_user'),
    '#states' => [
      'visible' => [
        ':input[name=l10n_client_contributor_use_server]' => ['checked' => TRUE],
      ],
    ],
  ];

  $form['l10n_client_contributor_basic_auth_pass'] = [
    '#title' => t('Basic Auth Password'),
    '#type' => 'password',
    '#default_value' => $config->get('basic_auth_pass'),
    '#states' => [
      'visible' => [
        ':input[name=l10n_client_contributor_use_server]' => ['checked' => TRUE],
      ],
    ],
  ];

  $form['#submit'][] = 'l10n_client_contributor_form_locale_translate_settings_submit';
}

/**
 * Submission function for additional settings on localization client settings.
 */
function l10n_client_contributor_form_locale_translate_settings_submit($form, FormStateInterface $form_state) {
  \Drupal::configFactory()->getEditable('l10n_client_contributor.settings')
    ->set('use_server', $form_state->getValue('l10n_client_contributor_use_server'))
    ->set('server', $form_state->getValue('l10n_client_contributor_server'))
    ->set('basic_auth_user', $form_state->getValue('l10n_client_contributor_basic_auth_user'))
    ->set('basic_auth_pass', $form_state->getValue('l10n_client_contributor_basic_auth_pass'))
    ->save();
}

/**
 * Implements hook_entity_field_access().
 */
function l10n_client_contributor_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {
  // Never allow viewing the API key on an entity.
  if ($field_definition->getFieldStorageDefinition()->getType() == 'l10n_client_contributor_key' && $operation == 'view') {
    return AccessResult::forbidden();
  }
  return AccessResult::neutral();
}

/**
 * Get user based semi unique token. Ensure keys are unique for each client.
 */
function l10n_client_contributor_user_token(UserInterface $account) {
  $key = \Drupal::service('private_key')->get();
  return md5('l10n_client_contributor' . $account->id() . $key);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function l10n_client_contributor_form_locale_translate_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $config = \Drupal::config('l10n_client_contributor.settings');
  if ($config->get('use_server')) {
    /** @var \Drupal\user\UserInterface $account */
    $account = User::load(\Drupal::currentUser()->id());
    /** @var \Drupal\l10n_client_contributor\L10nClientContributorHelperInterface $helper_service */
    $helper_service = \Drupal::service('l10n_client_contributor.helper');
    if (
      $account->hasPermission('contribute translations to localization server') &&
      isset($form['actions']['submit'])
    ) {
      // Make the button more expressive of what is happening.
      $form['actions']['submit']['#value'] = t('Save and contribute');
      $form['actions']['submit']['#button_type'] = 'primary';
      // Wire in remote submission to the form submission.
      array_unshift($form['#submit'], 'l10n_client_contributor_form_locale_translate_edit_form_submit');
    }
  }
}

/**
 * Additional submission functionality for translation editing.
 */
function l10n_client_contributor_form_locale_translate_edit_form_submit($form, FormStateInterface $form_state) {
  $lids = array_keys($form_state->getValue('strings'));
  $langcode = $form_state->getValue('langcode');
  $strings = $form_state->getValue('strings');

  l10n_client_contributor_save_translation($langcode, $lids, $strings);
}

/**
 * Save the suggested translations and send them to the localization server.
 *
 * @param string $langcode
 *   The language code of a translated string.
 * @param array $lids
 *   Local IDs of the strings.
 * @param array $strings
 *   List of strings and their translations.
 *
 * @return \Drupal\Core\StringTranslation\TranslatableMarkup|string
 *   The response message.
 */
function l10n_client_contributor_save_translation($langcode, array $lids, array $strings) {
  $translation_objects = $source_objects = [];

  $locale_storage = \Drupal::service('locale.storage');
  foreach ($locale_storage->getTranslations(['lid' => $lids, 'language' => $langcode, 'translated' => TRUE]) as $existing_translation_object) {
    $translation_objects[$existing_translation_object->lid] = $existing_translation_object;
  }

  foreach ($locale_storage->getStrings(['lid' => $lids]) as $source_object) {
    $source_objects[$source_object->lid] = $source_object;
  }

  $contributed = 0;
  $refused = [];
  $code = 200;
  $message = t('The translation saving was successful, but nothing changed.');

  foreach ($strings as $lid => $new_translation) {
    $existing_translation = isset($translation_objects[$lid]);

    // Plural translations are saved in a delimited string. To be able to
    // compare the new strings with the existing strings, a string in the same
    // format is created.
    $new_translation_string_delimited = implode(PoItem::DELIMITER, $new_translation['translations']);

    // Generate an imploded string without delimiter, to be able to run
    // empty() on it.
    $new_translation_string = implode('', $new_translation['translations']);

    $is_changed = FALSE;

    if ($existing_translation && $translation_objects[$lid]->translation != $new_translation_string_delimited) {
      // If there is an existing translation in the DB and the new translation
      // is not the same as the existing one.
      $is_changed = TRUE;
    }
    elseif (!$existing_translation && !empty($new_translation_string)) {
      // Newly entered translation.
      $is_changed = TRUE;
    }

    // Changed or new translation and it's not empty.
    if ($is_changed && !empty($new_translation_string)) {
      /** @var \Drupal\l10n_client_contributor\L10nClientContributorHelperInterface $helper_service */
      $helper_service = \Drupal::service('l10n_client_contributor.helper');
      list($code, $message) = $helper_service->sendTranslation(
        $langcode,
        $source_objects[$lid]->getString(),
        $new_translation_string_delimited,
        $source_objects[$lid]->context,
      );
      if ($code === 201) {
        $contributed++;
      }
      else {
        $refused[] = $message;
      }
    }
  }

  // END mostly copy of TranslateEditForm::submitForm().
  if ($contributed) {
    \Drupal::messenger()->addMessage(\Drupal::translation()->formatPlural($contributed, 'Just contributed a translation to the community. Great job!', 'Contributed @count translations to the community, rock!'));
  }
  if ($refused) {
    \Drupal::messenger()->addError(t('There was an error while contributing translations, please see the log for details.'));
  }

  return $message;
}
